{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "dashboardData",
    "fullyQualifiedName": "utils.dashboardData",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "View Applications",
    "collectionId": "View Applications_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const allPayments = await getAllUserPayments.run();\n  const allApplications = await getAllApplications.run();\n  const paidPayments = allPayments.filter(payment => payment.status === 'Paid');\n  const totalAmountCollected = paidPayments.reduce((total, payment) => total + payment.amount, 0);\n  const disbursedAmount = allApplications.reduce((total, payment) => total + payment.amount_offered, 0);\n  const latePayments = await getPaymentByStatus.run({\n    status: 'Late'\n  });\n  const atRiskPayments = await getPaymentByStatus.run({\n    status: 'At Risk'\n  });\n  const closedPayments = await getPaymentByStatus.run({\n    status: 'Closed'\n  });\n  const lossPayments = closedPayments.filter(p => p.payment_status === 'Unpaid');\n  const latePaymentCount = latePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const atRiskPaymentCount = atRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const lossPaymentsCount = lossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const today = new Date();\n  const lastMonthStart = new Date(today.getFullYear(), 2, 1);\n  const lastMonthEnd = new Date(today.getFullYear(), 3, 0);\n  const thisMonthStart = new Date(today.getFullYear(), 3, 1);\n  const lastMonthPayments = paidPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthPayments = paidPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAmountCollected = lastMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n  const thisMonthAmountCollected = thisMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n  const percentageDifference = (thisMonthAmountCollected - lastMonthAmountCollected) / lastMonthAmountCollected * 100;\n  const lastMonthDisbursement = allApplications.filter(payment => {\n    const paymentDate = new Date(payment.created);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthDisbursement = allApplications.filter(payment => {\n    const paymentDate = new Date(payment.created);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAmountDisbursed = lastMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n  const thisMonthAmountDisbursed = thisMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n  const percentageDifferenceDisbursed = (thisMonthAmountDisbursed - lastMonthAmountDisbursed) / lastMonthAmountDisbursed * 100;\n  const lastMonthLatePayments = latePayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthLatePayments = latePayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthLatePayment = lastMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthLatePayment = thisMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceLatePayment = (thisMonthLatePayment - lastMonthLatePayment) / lastMonthLatePayment * 100;\n  const lastMonthAtRiskPayments = atRiskPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthAtRiskPayments = atRiskPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAtRiskPayment = lastMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthAtRiskPayment = thisMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceAtRiskPayment = (thisMonthAtRiskPayment - lastMonthAtRiskPayment) / lastMonthAtRiskPayment * 100;\n  const lastMonthLossPayments = lossPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthLossPayments = lossPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthLossPayment = lastMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthLossPayment = thisMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceLossPayment = (thisMonthLossPayment - lastMonthLossPayment) / lastMonthLossPayment * 100;\n  return {\n    amountRepaid: totalAmountCollected.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    repaidDiff: percentageDifference.toFixed(2),\n    disbursedAmount: disbursedAmount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    disbursedDiff: percentageDifferenceDisbursed.toFixed(2),\n    latePayment: latePaymentCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    latePaymentDiff: percentageDifferenceLatePayment.toFixed(2),\n    atRiskPayment: atRiskPaymentCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    atRiskPaymentDiff: percentageDifferenceAtRiskPayment.toFixed(2),\n    lossPayments: lossPaymentsCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    lossPaymentDiff: percentageDifferenceLossPayment.toFixed(2)\n  };\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const allPayments = await getAllUserPayments.run();\n  const allApplications = await getAllApplications.run();\n  const paidPayments = allPayments.filter(payment => payment.status === 'Paid');\n  const totalAmountCollected = paidPayments.reduce((total, payment) => total + payment.amount, 0);\n  const disbursedAmount = allApplications.reduce((total, payment) => total + payment.amount_offered, 0);\n  const latePayments = await getPaymentByStatus.run({\n    status: 'Late'\n  });\n  const atRiskPayments = await getPaymentByStatus.run({\n    status: 'At Risk'\n  });\n  const closedPayments = await getPaymentByStatus.run({\n    status: 'Closed'\n  });\n  const lossPayments = closedPayments.filter(p => p.payment_status === 'Unpaid');\n  const latePaymentCount = latePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const atRiskPaymentCount = atRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const lossPaymentsCount = lossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const today = new Date();\n  const lastMonthStart = new Date(today.getFullYear(), 2, 1);\n  const lastMonthEnd = new Date(today.getFullYear(), 3, 0);\n  const thisMonthStart = new Date(today.getFullYear(), 3, 1);\n  const lastMonthPayments = paidPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthPayments = paidPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAmountCollected = lastMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n  const thisMonthAmountCollected = thisMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n  const percentageDifference = (thisMonthAmountCollected - lastMonthAmountCollected) / lastMonthAmountCollected * 100;\n  const lastMonthDisbursement = allApplications.filter(payment => {\n    const paymentDate = new Date(payment.created);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthDisbursement = allApplications.filter(payment => {\n    const paymentDate = new Date(payment.created);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAmountDisbursed = lastMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n  const thisMonthAmountDisbursed = thisMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n  const percentageDifferenceDisbursed = (thisMonthAmountDisbursed - lastMonthAmountDisbursed) / lastMonthAmountDisbursed * 100;\n  const lastMonthLatePayments = latePayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthLatePayments = latePayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthLatePayment = lastMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthLatePayment = thisMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceLatePayment = (thisMonthLatePayment - lastMonthLatePayment) / lastMonthLatePayment * 100;\n  const lastMonthAtRiskPayments = atRiskPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthAtRiskPayments = atRiskPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthAtRiskPayment = lastMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthAtRiskPayment = thisMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceAtRiskPayment = (thisMonthAtRiskPayment - lastMonthAtRiskPayment) / lastMonthAtRiskPayment * 100;\n  const lastMonthLossPayments = lossPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n  });\n  const thisMonthLossPayments = lossPayments.filter(payment => {\n    const paymentDate = new Date(payment.payment_date);\n    return paymentDate >= thisMonthStart;\n  });\n  const lastMonthLossPayment = lastMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const thisMonthLossPayment = thisMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n  const percentageDifferenceLossPayment = (thisMonthLossPayment - lastMonthLossPayment) / lastMonthLossPayment * 100;\n  return {\n    amountRepaid: totalAmountCollected.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    repaidDiff: percentageDifference.toFixed(2),\n    disbursedAmount: disbursedAmount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    disbursedDiff: percentageDifferenceDisbursed.toFixed(2),\n    latePayment: latePaymentCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    latePaymentDiff: percentageDifferenceLatePayment.toFixed(2),\n    atRiskPayment: atRiskPaymentCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    atRiskPaymentDiff: percentageDifferenceAtRiskPayment.toFixed(2),\n    lossPayments: lossPaymentsCount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }),\n    lossPaymentDiff: percentageDifferenceLossPayment.toFixed(2)\n  };\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "View Applications_utils.dashboardData",
  "deleted": false,
  "gitSyncId": "643669eb7c81ad7697466883_644a13df01e69b53ba6da487"
}