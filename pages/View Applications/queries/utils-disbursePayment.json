{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "disbursePayment",
    "fullyQualifiedName": "utils.disbursePayment",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "View Applications",
    "collectionId": "View Applications_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  if (!tbl_applications.selectedRow.Bank || !tbl_applications.selectedRow.BankNo) {\n    return showAlert('Add bank details to continue', 'warning');\n  }\n  const amountOffered = parseInt(tbl_applications.selectedRow.AmountOffered.replace(/[^\\d.-]/g, ''));\n  const noOfMonths = tbl_applications.selectedRow.Term * 12 || 12;\n  const interest = amountOffered * (tbl_applications.selectedRow.Interest / 100);\n  const totalReturned = amountOffered + interest;\n  const monthlyFee = totalReturned / noOfMonths;\n  let startDate = new Date(tbl_applications.selectedRow.Created);\n  const promises = [];\n  for (let i = 0; i < noOfMonths; i++) {\n    startDate.setMonth(startDate.getMonth() + 1);\n    promises.push(createLoanPayment.run({\n      amount: monthlyFee.toFixed(2),\n      paymentDate: startDate.toISOString()\n    }));\n  }\n  await Promise.all(promises);\n  await updateApplicationStatus.run({\n    status: 'Disbursed'\n  });\n  await utils.getApplications();\n  await utils.userPayments();\n  closeModal('mdl_disburse');\n  showAlert(`Loan Disbursed!`, 'success');\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  if (!tbl_applications.selectedRow.Bank || !tbl_applications.selectedRow.BankNo) {\n    return showAlert('Add bank details to continue', 'warning');\n  }\n  const amountOffered = parseInt(tbl_applications.selectedRow.AmountOffered.replace(/[^\\d.-]/g, ''));\n  const noOfMonths = tbl_applications.selectedRow.Term * 12 || 12;\n  const interest = amountOffered * (tbl_applications.selectedRow.Interest / 100);\n  const totalReturned = amountOffered + interest;\n  const monthlyFee = totalReturned / noOfMonths;\n  let startDate = new Date(tbl_applications.selectedRow.Created);\n  const promises = [];\n  for (let i = 0; i < noOfMonths; i++) {\n    startDate.setMonth(startDate.getMonth() + 1);\n    promises.push(createLoanPayment.run({\n      amount: monthlyFee.toFixed(2),\n      paymentDate: startDate.toISOString()\n    }));\n  }\n  await Promise.all(promises);\n  await updateApplicationStatus.run({\n    status: 'Disbursed'\n  });\n  await utils.getApplications();\n  await utils.userPayments();\n  closeModal('mdl_disburse');\n  showAlert(`Loan Disbursed!`, 'success');\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "View Applications_utils.disbursePayment",
  "deleted": false,
  "gitSyncId": "643669eb7c81ad7697466883_644a4d8101e69b53ba6da7fa"
}