{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getApplications",
    "fullyQualifiedName": "utils.getApplications",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "View Applications",
    "collectionId": "View Applications_utils",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const applications = await getApplications.run();\n  const status = sel_status.selectedOptionValue;\n  const date = sel_date.selectedOptionValue;\n  let filteredApplications = applications;\n  if (status) {\n    filteredApplications = applications.filter(a => a.status === status);\n  }\n  if (date) {\n    if (date === 'Today') {\n      const now = moment;\n      filteredApplications = applications.filter(a => moment(a.created).isSame(now, 'day'));\n    }\n    if (date === 'Yesterday') {\n      const yesterday = moment().subtract(1, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isSame(yesterday, 'day'));\n    }\n    if (date === '7 days') {\n      const last7Days = moment().subtract(7, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last7Days, 'day'));\n    }\n    if (date === '30 days') {\n      const last30Days = moment().subtract(30, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last30Days, 'day'));\n    }\n    if (date === '3 months') {\n      const last3Months = moment().subtract(90, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last3Months, 'day'));\n    }\n  }\n  return filteredApplications.map(a => {\n    return {\n      Id: a.id,\n      Name: a.first_name + ' ' + a.last_name,\n      Amount: a.amount_requested.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      AppliedOn: new Date(a.created).toDateString(),\n      Status: a.status,\n      Email: a.email,\n      Phone: a.phone,\n      DOB: a.date_of_birth,\n      Gender: a.gender,\n      Address: a.address,\n      CreditProduct: a.credit_product,\n      Term: parseInt(a.term),\n      Interest: a.interest,\n      RepaymentPeriod: a.repayment_period,\n      TRN_No: a.trn_number,\n      MonthlyIncome: parseInt(a.monthly_income).toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      AmountOffered: a.amount_offered ? a.amount_offered.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }) : '',\n      CreditScore: a.credit_score,\n      CreditRisk: a.credit_risk,\n      CreditDefault: a.credit_default,\n      Bank: a.bank_name,\n      BankNo: a.bank_code || '',\n      BankAccount: a.bank_account_no || '',\n      BankAccountType: a.bank_account_type || '',\n      Image: a.image_url,\n      Created: a.created\n    };\n  });\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const applications = await getApplications.run();\n  const status = sel_status.selectedOptionValue;\n  const date = sel_date.selectedOptionValue;\n  let filteredApplications = applications;\n  if (status) {\n    filteredApplications = applications.filter(a => a.status === status);\n  }\n  if (date) {\n    if (date === 'Today') {\n      const now = moment;\n      filteredApplications = applications.filter(a => moment(a.created).isSame(now, 'day'));\n    }\n    if (date === 'Yesterday') {\n      const yesterday = moment().subtract(1, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isSame(yesterday, 'day'));\n    }\n    if (date === '7 days') {\n      const last7Days = moment().subtract(7, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last7Days, 'day'));\n    }\n    if (date === '30 days') {\n      const last30Days = moment().subtract(30, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last30Days, 'day'));\n    }\n    if (date === '3 months') {\n      const last3Months = moment().subtract(90, 'day').startOf('day');\n      filteredApplications = applications.filter(a => moment(a.created).isAfter(last3Months, 'day'));\n    }\n  }\n  return filteredApplications.map(a => {\n    return {\n      Id: a.id,\n      Name: a.first_name + ' ' + a.last_name,\n      Amount: a.amount_requested.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      AppliedOn: new Date(a.created).toDateString(),\n      Status: a.status,\n      Email: a.email,\n      Phone: a.phone,\n      DOB: a.date_of_birth,\n      Gender: a.gender,\n      Address: a.address,\n      CreditProduct: a.credit_product,\n      Term: parseInt(a.term),\n      Interest: a.interest,\n      RepaymentPeriod: a.repayment_period,\n      TRN_No: a.trn_number,\n      MonthlyIncome: parseInt(a.monthly_income).toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }),\n      AmountOffered: a.amount_offered ? a.amount_offered.toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }) : '',\n      CreditScore: a.credit_score,\n      CreditRisk: a.credit_risk,\n      CreditDefault: a.credit_default,\n      Bank: a.bank_name,\n      BankNo: a.bank_code || '',\n      BankAccount: a.bank_account_no || '',\n      BankAccountType: a.bank_account_type || '',\n      Image: a.image_url,\n      Created: a.created\n    };\n  });\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "View Applications_utils.getApplications",
  "deleted": false,
  "gitSyncId": "643669eb7c81ad7697466883_644a13df01e69b53ba6da46f"
}