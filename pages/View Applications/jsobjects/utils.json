{
  "unpublishedCollection": {
    "name": "utils",
    "pageId": "View Applications",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tinitialize: () => {\n\t\tstoreValue('docIndex', 0);\n\t},\n\n\tsignOut: async () => {\n\t\tclearStore('token', null).then(() => navigateTo('Login'));\n\t},\n\n\tuserToken: async () => {\n\t\tconst token = appsmith.store.token;\n\t\treturn jsonwebtoken.decode(token, 'secret');\n\t},\n\n\tgetApplications: async () => {\n\t\tconst applications = await getApplications.run();\n\t\tconst status = sel_status.selectedOptionValue;\n\t\tconst date = sel_date.selectedOptionValue;\n\n\n\t\tlet filteredApplications = applications;\n\n\t\tif (status) {\n\t\t\tfilteredApplications = applications.filter(a => a.status === status);\n\t\t}\n\n\t\tif (date) {\n\t\t\tif (date === 'Today') {\n\t\t\t\tconst now = moment;\n\t\t\t\tfilteredApplications = applications.filter(a => moment(a.created).isSame(now, 'day'))\n\t\t\t}\n\t\t\tif (date === 'Yesterday') {\n\t\t\t\tconst yesterday = moment().subtract(1, 'day').startOf('day');\n\t\t\t\tfilteredApplications = applications.filter(a => moment(a.created).isSame(yesterday, 'day'))\n\t\t\t}\n\t\t\tif (date === '7 days') {\n\t\t\t\tconst last7Days = moment().subtract(7, 'day').startOf('day');\n\t\t\t\tfilteredApplications = applications.filter(a => moment(a.created).isAfter(last7Days, 'day'))\n\t\t\t}\n\t\t\tif (date === '30 days') {\n\t\t\t\tconst last30Days = moment().subtract(30, 'day').startOf('day');\n\t\t\t\tfilteredApplications = applications.filter(a => moment(a.created).isAfter(last30Days, 'day'))\n\t\t\t}\n\t\t\tif (date === '3 months') {\n\t\t\t\tconst last3Months = moment().subtract(90, 'day').startOf('day');\n\t\t\t\tfilteredApplications = applications.filter(a => moment(a.created).isAfter(last3Months, 'day'))\n\t\t\t}\n\t\t}\n\n\t\treturn filteredApplications.map(a => {\n\t\t\treturn {\n\t\t\t\tId: a.id,\n\t\t\t\tName: a.first_name + ' ' + a.last_name,\n\t\t\t\tAmount: a.amount_requested.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tAppliedOn: new Date(a.created).toDateString(),\n\t\t\t\tStatus: a.status,\n\t\t\t\tEmail: a.email,\n\t\t\t\tPhone: a.phone,\n\t\t\t\tDOB: a.date_of_birth,\n\t\t\t\tGender: a.gender,\n\t\t\t\tAddress: a.address,\n\t\t\t\tCreditProduct: a.credit_product,\n\t\t\t\tTerm: parseInt(a.term),\n\t\t\t\tInterest: a.interest,\n\t\t\t\tRepaymentPeriod: a.repayment_period,\n\t\t\t\tTRN_No: a.trn_number,\n\t\t\t\tMonthlyIncome: parseInt(a.monthly_income).toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\t\tAmountOffered: a.amount_offered ? a.amount_offered.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) : '',\n\t\t\t\tCreditScore: a.credit_score,\n\t\t\t\tCreditRisk: a.credit_risk,\n\t\t\t\tCreditDefault: a.credit_default,\n\t\t\t\tBank: a.bank_name,\n\t\t\t\tBankNo: a.bank_code || '',\n\t\t\t\tBankAccount: a.bank_account_no || '',\n\t\t\t\tBankAccountType: a.bank_account_type || '',\n\t\t\t\tImage: a.image_url,\n\t\t\t\tCreated: a.created,\n\t\t\t}\n\t\t})\n\t},\n\n\tgetMonthlyInstallment: () => {\n\t\tconst interestRate = tbl_applications.selectedRow.Interest;\n\t\tconst totalPayments = tbl_applications.selectedRow.Term * 12;\n\t\tconst requestedAmount = parseInt(tbl_applications.selectedRow.AmountOffered.replace(/[^\\d.-]/g, ''));\n\n\t\tconst finalPayback = requestedAmount + (requestedAmount * interestRate / 100);\n\n\t\tconst monthylyPayback = finalPayback / totalPayments;\n\n\t\t// If Requested amount has not been set, then no monthly installments can be calculated\n\t\treturn tbl_applications.selectedRow.AmountOffered ? parseInt(monthylyPayback.toFixed(2)).toLocaleString('en-US', { style: 'currency', currency: 'USD' }) : ''\n\t},\n\n\treturnCreditRiskColor: () => {\n\t\tif (tbl_applications.selectedRow.CreditRisk === 'Low') {\n\t\t\treturn 'RGB(0, 128, 0)'\n\t\t};\n\t\tif (tbl_applications.selectedRow.CreditRisk === 'Medium') {\n\t\t\treturn 'RGB(255, 165, 0)';\n\t\t};\n\t\tif (tbl_applications.selectedRow.CreditRisk === 'High') {\n\t\t\treturn 'RGB(255, 0, 0)'\n\t\t}\n\t\treturn 'RGB(255, 165, 0)'\n\t},\n\n\tloanStatusColor: (status) => {\n\t\tif (status === 'Approved' || status === 'Disbursed' || status === 'Active') {\n\t\t\treturn 'RGB(0, 128, 0)'\n\t\t}\n\t\tif (status === 'Rejected' || status === 'Late' || status === 'At Risk' || status === 'Closed') {\n\t\t\treturn 'RGB(255, 0, 0)'\n\t\t}\n\t\treturn 'RGB(255, 165, 0)';\n\t},\n\n\tuserPayments: async () => {\n\t\tconst payments = await getUserPayments.run()\n\t\treturn payments.map(p => {\n\t\t\treturn {\n\t\t\t\tDate: p.payment_date,\n\t\t\t\tPrincipal: p.principal,\n\t\t\t\tInterest: p.interest,\n\t\t\t\tAmount: p.amount,\n\t\t\t\tStatus: p.status,\n\t\t\t}\n\t\t})\n\t},\n\n\thandleDocumentSwitch: async (action) => {\n\t\tconst totalDoc = await getLoanDocuments.run();\n\t\tconst totalDocLength = totalDoc.length;\n\t\tconst prevDocIndex = appsmith.store.docIndex || 0;\n\n\t\tif (action === 'INCREASE') {\n\n\t\t\tif (prevDocIndex == parseInt(totalDocLength) - 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreValue('docIndex', prevDocIndex + 1);\n\t\t} else {\n\t\t\tif (prevDocIndex === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreValue('docIndex', prevDocIndex - 1);\n\t\t}\n\t},\n\n\tsetLoanDocuments: async () => {\n\t\tconst loanDocuments = await getLoanDocuments.run();\n\t\tif (loanDocuments) {\n\t\t\tstoreValue('loanDocument', loanDocuments);\n\t\t}\n\t},\n\n\tupdateBankAccount: async () => {\n\t\tawait updateBankDetails.run();\n\n\t\tawait this.getApplications();\n\n\t\tshowAlert('Bank Account Updated!', 'success');\n\t},\n\n\treturnDocType: () => {\n\t\tconst loanDocument = appsmith.store.loanDocument;\n\t\tconst docIndex = appsmith.store.docIndex;\n\t\tlet docType = '';\n\n\t\tif (loanDocument && loanDocument.length > 0) {\n\t\t\tdocType = loanDocument[docIndex].document_type;\n\t\t}\n\n\t\treturn docType;\n\t},\n\n\treturnDocImg: () => {\n\t\tconst loanDocument = appsmith.store.loanDocument;\n\t\tconst docIndex = appsmith.store.docIndex;\n\t\tlet docImg = '';\n\n\t\tif (loanDocument && loanDocument.length > 0) {\n\t\t\tdocImg = loanDocument[docIndex].data;\n\t\t}\n\n\t\treturn docImg;\n\t},\n\n\tdashboardData: async () => {\n\t\tconst allPayments = await getAllUserPayments.run();\n\t\tconst allApplications = await getAllApplications.run();\n\n\t\tconst paidPayments = allPayments.filter(payment => payment.status === 'Paid');\n\t\tconst totalAmountCollected = paidPayments.reduce((total, payment) => total + payment.amount, 0);\n\t\tconst disbursedAmount = allApplications.reduce((total, payment) => total + payment.amount_offered, 0);\n\t\tconst latePayments = await getPaymentByStatus.run({\n\t\t\tstatus: 'Late'\n\t\t})\n\t\tconst atRiskPayments = await getPaymentByStatus.run({\n\t\t\tstatus: 'At Risk'\n\t\t})\n\t\tconst closedPayments = await getPaymentByStatus.run({\n\t\t\tstatus: 'Closed'\n\t\t})\n\t\tconst lossPayments = closedPayments.filter(p => p.payment_status === 'Unpaid');\n\n\t\tconst latePaymentCount = latePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\t\tconst atRiskPaymentCount = atRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\t\tconst lossPaymentsCount = lossPayments.reduce((total, payment) => total + payment.payment_amount, 0)\n\n\t\tconst today = new Date();\n\t\tconst lastMonthStart = new Date(today.getFullYear(), 2, 1);\n\t\tconst lastMonthEnd = new Date(today.getFullYear(), 3, 0);\n\t\tconst thisMonthStart = new Date(today.getFullYear(), 3, 1);\n\n\t\t// Perc for repaid\n\t\tconst lastMonthPayments = paidPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n\t\t});\n\t\tconst thisMonthPayments = paidPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= thisMonthStart;\n\t\t});\n\n\t\tconst lastMonthAmountCollected = lastMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n\t\tconst thisMonthAmountCollected = thisMonthPayments.reduce((total, payment) => total + payment.amount, 0);\n\n\t\tconst percentageDifference = ((thisMonthAmountCollected - lastMonthAmountCollected) / lastMonthAmountCollected) * 100;\n\n\t\t// Perc for disbursements\n\t\tconst lastMonthDisbursement = allApplications.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.created);\n\t\t\treturn paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n\t\t});\n\t\tconst thisMonthDisbursement = allApplications.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.created);\n\t\t\treturn paymentDate >= thisMonthStart;\n\t\t});\n\n\t\tconst lastMonthAmountDisbursed = lastMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n\t\tconst thisMonthAmountDisbursed = thisMonthDisbursement.reduce((total, payment) => total + payment.amount_offered, 0);\n\n\t\tconst percentageDifferenceDisbursed = ((thisMonthAmountDisbursed - lastMonthAmountDisbursed) / lastMonthAmountDisbursed) * 100;\n\n\t\t// Perc for late\n\t\tconst lastMonthLatePayments = latePayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n\t\t});\n\t\tconst thisMonthLatePayments = latePayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= thisMonthStart;\n\t\t});\n\n\t\tconst lastMonthLatePayment = lastMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\t\tconst thisMonthLatePayment = thisMonthLatePayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\n\t\tconst percentageDifferenceLatePayment = ((thisMonthLatePayment - lastMonthLatePayment) / lastMonthLatePayment) * 100;\n\n\t\t// Perc for At Risk\n\t\tconst lastMonthAtRiskPayments = atRiskPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n\t\t});\n\t\tconst thisMonthAtRiskPayments = atRiskPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= thisMonthStart;\n\t\t});\n\n\t\tconst lastMonthAtRiskPayment = lastMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\t\tconst thisMonthAtRiskPayment = thisMonthAtRiskPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\n\t\tconst percentageDifferenceAtRiskPayment = ((thisMonthAtRiskPayment - lastMonthAtRiskPayment) / lastMonthAtRiskPayment) * 100;\n\n\t\t// Perc for Loss\n\t\tconst lastMonthLossPayments = lossPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= lastMonthStart && paymentDate <= lastMonthEnd;\n\t\t});\n\t\tconst thisMonthLossPayments = lossPayments.filter(payment => {\n\t\t\tconst paymentDate = new Date(payment.payment_date);\n\t\t\treturn paymentDate >= thisMonthStart;\n\t\t});\n\n\t\tconst lastMonthLossPayment = lastMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\t\tconst thisMonthLossPayment = thisMonthLossPayments.reduce((total, payment) => total + payment.payment_amount, 0);\n\n\t\tconst percentageDifferenceLossPayment = ((thisMonthLossPayment - lastMonthLossPayment) / lastMonthLossPayment) * 100;\n\n\t\treturn { \n\t\t\tamountRepaid: totalAmountCollected.toLocaleString('en-US', { style: 'currency', currency: 'USD' }), \n\t\t\trepaidDiff: percentageDifference.toFixed(2), \n\t\t\tdisbursedAmount: disbursedAmount.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\tdisbursedDiff: percentageDifferenceDisbursed.toFixed(2),\n\t\t\tlatePayment: latePaymentCount.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\tlatePaymentDiff: percentageDifferenceLatePayment.toFixed(2),\n\t\t\tatRiskPayment: atRiskPaymentCount.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\tatRiskPaymentDiff: percentageDifferenceAtRiskPayment.toFixed(2),\n\t\t\tlossPayments: lossPaymentsCount.toLocaleString('en-US', { style: 'currency', currency: 'USD' }),\n\t\t\tlossPaymentDiff: percentageDifferenceLossPayment.toFixed(2),\n\t\t}\n\t},\n\n\trejectApplication: async () => {\n\t\tawait rejectLoan.run()\n\t\tawait this.getApplications();\n\t\tcloseModal('mdl_rejectLoan');\n\t\tshowAlert(`Application Rejected!`, 'success');\n\t},\n\n\tacceptApplication: async () => {\n\t\tawait acceptLoan.run()\n\t\tawait this.getApplications();\n\t\tcloseModal('mdl_acceptLoan');\n\t\tshowAlert(`Application Accepted!`, 'success');\n\t},\n\n\tdisbursePayment: async () => {\n\t\tif (!tbl_applications.selectedRow.Bank || !tbl_applications.selectedRow.BankNo) {\n\t\t\treturn showAlert('Add bank details to continue', 'warning');\n\t\t}\n\n\t\tconst amountOffered = parseInt(tbl_applications.selectedRow.AmountOffered.replace(/[^\\d.-]/g, ''))\n\n\t\tconst noOfMonths = tbl_applications.selectedRow.Term * 12 || 12;\n\t\tconst interest = amountOffered * (tbl_applications.selectedRow.Interest / 100);\n\t\tconst totalReturned = amountOffered + interest;\n\n\t\tconst monthlyFee = totalReturned / noOfMonths;\n\t\tlet startDate = new Date(tbl_applications.selectedRow.Created);\n\n\t\tconst promises = [];\n\n\t\tfor (let i = 0; i < noOfMonths; i++) {\n\t\t\tstartDate.setMonth(startDate.getMonth() + 1);\n\t\t\tpromises.push(createLoanPayment.run({\n\t\t\t\tamount: monthlyFee.toFixed(2),\n\t\t\t\tpaymentDate: startDate.toISOString(),\n\t\t\t}));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\n\t\tawait updateApplicationStatus.run({\n\t\t\tstatus: 'Disbursed'\n\t\t})\n\t\t\n\t\tawait this.getApplications();\n\n\t\tawait this.userPayments();\n\n\t\tcloseModal('mdl_disburse');\n\n\t\tshowAlert(`Loan Disbursed!`, 'success');\n\t},\n\n\tcreateNewApplication: async () => {\n\n\t\tconst profileImgExists = fpk_uploadProfileImg.files && fpk_uploadProfileImg.files.length > 0;\n\t\tconst loanDocumentExists = fpk_documentUpload.files && fpk_documentUpload.files.length > 0;\n\t\tlet profileImage = null;\n\t\tlet loanDocument = null;\n\n\t\tif (profileImgExists) {\n\t\t\tprofileImage = await cloudinaryImageUpload.run({\n\t\t\t\tdata: fpk_uploadProfileImg.files[0].data,\n\t\t\t});\n\t\t}\n\n\t\tif (loanDocumentExists) {\n\t\t\tloanDocument = await cloudinaryImageUpload.run({\n\t\t\t\tdata: fpk_documentUpload.files[0].data,\n\t\t\t});\n\t\t}\n\n\t\tconst newApplication = await createApplication.run({\n\t\t\timageUrl: profileImgExists ? profileImage?.url : null\n\t\t});\n\t\t\n\n\t\tif (loanDocumentExists) {\n\t\t\tawait createLoanDocument.run({\n\t\t\t\tdocument: loanDocument.url,\n\t\t\t\tloanId: newApplication[0].id\n\t\t\t})\n\t\t}\n\n\t\tawait this.getApplications();\n\n\t\tcloseModal('mdl_newApplication');\n\n\t\tshowAlert('Application Created!', 'success');\n\t},\n\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "View Applications_utils",
  "deleted": false,
  "gitSyncId": "643669eb7c81ad7697466883_644727a4dbc61a19e0eef308"
}